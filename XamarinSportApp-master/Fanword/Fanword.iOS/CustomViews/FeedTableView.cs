// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Mobile.Extensions.iOS.Sources;
using Fanword.Poco.Models;
using Fanword.Shared.Models;
using System.Collections.Generic;
using System.Linq;
using Fanword.Shared;
using Mobile.Extensions.iOS.Extensions;
using FFImageLoading;
using Humanizer;
using FFImageLoading.Transformations;
using Plugin.Settings;
using Mobile.Extensions.Extensions;
using Fanword.iOS.Shared;

namespace Fanword.iOS
{
	public partial class FeedTableView : UITableView
	{

		BaseViewController viewController;
		bool isLoadingData;
		int itemsLoaded;
		string id;
		FeedType type;
		UIView view;
		CustomListSource<FeedItem> source;
		UITableViewCell topCell;
		private UIStringAttributes boldAttributes { get; set; }
		private UIStringAttributes regularAttributes { get; set; }
		public UIRefreshControl RefreshControl { get; set; }
		public UIImageView NoFeedItems { get; set; }
		public EventHandler<EventArgs> DataReceived;
        public EventHandler<EventArgs> RefreshRequested;
		public UIRefreshControl customRefreshControl;

        User user;
		public FeedTableView (IntPtr handle) : base (handle)
		{
		}

		public FeedTableView () : base ()
		{
		}
		public void Initialize (BaseViewController viewController, UIView view, string id, FeedType type)
		{
			this.viewController = viewController;
			this.id = id;
			this.type = type;
			this.view = view;
			if (this.view?.Superview != null)
			{
				this.view.RemoveFromSuperview ();
			}
			SharedInitialize ();
		}

		public void Initialize (BaseViewController viewController)
		{
			this.viewController = viewController;
			SharedInitialize ();
		}
		void SharedInitialize ()
		{
            user = CrossSettings.Current.GetValueOrDefaultJson<User>("User");
			var model = new List<FeedItem> ();
			if (view != null)
			{
				model.Add (new FeedItem ());
			}
			source = new CustomListSource<FeedItem> (model, GetCell, (tv, ip) => AutomaticDimension);
            //source.NoContentEnabled = false;
            source.NoContentText = "No content yet. Try following some profiles.";

			Source = source;
            ReloadData();
			EstimatedRowHeight = 231;
			RowHeight = AutomaticDimension;
			source.OnScroll += (sender, e) => OnScroll (e);
			GetNewsFeedData (true);
		}


		BaseViewController GetBottomViewController (UIViewController viewcontroller)
		{
			if (viewcontroller.ParentViewController != null && !(viewcontroller.ParentViewController is UINavigationController))
			{
				return GetBottomViewController (viewcontroller.ParentViewController);
			}
			else
			{
				return (viewcontroller as BaseViewController);
			}
		}

        public void UpdateFeedItem(string postId)
        {
			if (!string.IsNullOrEmpty(postId))
			{
				if (postId == "Refresh")
				{
					GetNewsFeedData(true);
				}
				else
				{
					var apiTask = new ServiceApi().GetFeedItem(postId);
					apiTask.HandleError();
					apiTask.OnSucess((response) =>
					{
						var index = source.Items.FindIndex(m => m.Id == postId);
                        if(index >= 0)
                        {
							source.Items[index] = response.Result;
                        }
                        ReloadData();
					});
				}
			}
        }

		public void GetNewsFeedData (bool refresh)
		{
            if(!source.Items.Any())
            {
				GetBottomViewController(viewController).LoadingScreen.Show();
			}
			isLoadingData = true;
            DateTime queryDate = DateTime.UtcNow.AddMinutes(2);
            var strQueryDate = string.Format("{0:MM/dd/yyyy hh:mm tt}", queryDate);

			if (!refresh)
			{
				queryDate = DateTime.SpecifyKind (source.Items.LastOrDefault (m => !string.IsNullOrEmpty(m.Id)).DateCreatedUtc, DateTimeKind.Utc).ToLocalTime ();
                strQueryDate = string.Format("{0:MM/dd/yyyy hh:mm tt}", queryDate);
			}
            else
            {
                RefreshRequested?.Invoke(this, EventArgs.Empty);
            }

            var apiTask = new ServiceApi ().GetFeed (strQueryDate, id, type);
			apiTask.HandleError (viewController.LoadingScreen);
			apiTask.OnSucess (response =>
			{
				if (NoFeedItems != null)
				{
					if (response.Result.Count == 0)
					{
						NoFeedItems.Hidden = false;
					}
					else
					{
						NoFeedItems.Hidden = true;
					}
				}
				if (RefreshControl != null)
				{
					RefreshControl.EndRefreshing ();
				}
				GetBottomViewController (viewController).LoadingScreen.Hide ();
				itemsLoaded = response.Result.Count;
				if (refresh)
				{
					//
					source.Items = response.Result;
					if (view != null)
					{
						source.Items.Insert (0, new FeedItem ());
					}

					//if (vwViewNewPosts.Superview != null)
					//{
					//	vwViewNewPosts.RemoveFromSuperview ();
					//}
				}
				else
				{
					source.Items.AddRange (response.Result);
				}
				ReloadData ();
				if (refresh)
				{
					customRefreshControl.EndRefreshing ();
					if (source.Items.Count > 0)
					{
						ScrollToRow (NSIndexPath.FromItemSection (0, 0), UITableViewScrollPosition.Top, false);
					}
				}
				isLoadingData = false;

				DataReceived?.Invoke (this, EventArgs.Empty);
			});
		}

		public UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath, FeedItem item)
		{
			
			if (string.IsNullOrEmpty(item.Id) && string.IsNullOrEmpty(item.AdvertisementUrl))
			{
				if (topCell == null)
				{
					topCell = new UITableViewCell ();
					topCell.SelectionStyle = UITableViewCellSelectionStyle.None;
					topCell.Add (view);
					topCell.AddConstraint (NSLayoutConstraint.Create (view, NSLayoutAttribute.Left, NSLayoutRelation.Equal, topCell, NSLayoutAttribute.Left, 1, 0));
					topCell.AddConstraint (NSLayoutConstraint.Create (view, NSLayoutAttribute.Top, NSLayoutRelation.Equal, topCell, NSLayoutAttribute.Top, 1, 0));
					topCell.AddConstraint (NSLayoutConstraint.Create (view, NSLayoutAttribute.Bottom, NSLayoutRelation.Equal, topCell, NSLayoutAttribute.Bottom, 1, 0));
					topCell.AddConstraint (NSLayoutConstraint.Create (view, NSLayoutAttribute.Right, NSLayoutRelation.Equal, topCell, NSLayoutAttribute.Right, 1, 0));
					//AppDelegate.SetViewFont (topCell);
				}
				topCell.SelectionStyle = UITableViewCellSelectionStyle.None;

				return topCell;
			}
            if(!string.IsNullOrEmpty(item.AdvertisementUrl))
            {
				var cell = tableView.DequeueReusableCell("AdvertisementCell", indexPath) as AdvertisementCell;
				//cell.Position = indexPath.Row;
                cell.SetData(item);
				cell.SelectionStyle = UITableViewCellSelectionStyle.None;
				return cell;
            }
            else
            {
				var cell = tableView.DequeueReusableCell("FeedCell", indexPath) as FeedCell;
				cell.Position = indexPath.Row;
				SetNewsFeedCellCommon(cell, item);
                cell.SetNeedsUpdateConstraints();
                cell.SetNeedsLayout();
				cell.SelectionStyle = UITableViewCellSelectionStyle.None;
				return cell;
            }
		}

		public void SetNewsFeedCellCommon (IFeedCell cell, FeedItem item)
		{
			cell.PostId = item.Id;
			if (cell.IsCommonNew)
			{
				cell.BtnLike.TouchUpInside += (sender, e) => LikeClicked (cell.Position, cell.BtnLike, cell.LblLikes);
				cell.BtnComment.TouchUpInside += (sender, e) => PostDetailsClicked (cell.PostId, "Comments");
                cell.LblShares.UserInteractionEnabled = true;
                cell.LblShares.AddGestureRecognizer(new UITapGestureRecognizer((obj) => PostDetailsClicked(cell.PostId, "Shares")));
                cell.BtnShare.TouchUpInside += (sender, e) => ShareClicked(cell.PostId);
                cell.BtnTag.TouchUpInside += (sender, e) => PostDetailsClicked(cell.PostId, "Tags");
				cell.LblComments.AddGestureRecognizer (new UITapGestureRecognizer (() => PostDetailsClicked (cell.PostId, "Comments")));
				cell.LblLikes.AddGestureRecognizer (new UITapGestureRecognizer (() => PostDetailsClicked (cell.PostId, "Likes")));
				cell.BtnOptions.TouchUpInside += (sender, e) => OptionsClicked (cell.PostId);
                cell.BtnPlay.TouchUpInside += (sender, e) => PlayClicked(cell.PostId);
                cell.LblName.AddGestureRecognizer(new UITapGestureRecognizer(() => GoToProfile(cell.PostId)));
                cell.ImgProfile.UserInteractionEnabled = true;
                cell.ImgProfile.AddGestureRecognizer(new UITapGestureRecognizer(() => GoToProfile(cell.PostId)));
                cell.ImgImage.UserInteractionEnabled = true;
                cell.ImgImage.AddGestureRecognizer(new UITapGestureRecognizer((obj) => ImageClicked(cell.PostId)));
               // cell.BtnFacebook.TouchUpInside += (sender, e) => Links.OpenUrl(source.Items[cell.Position].FacebookUrl);
                //cell.BtnTwitter.TouchUpInside += (sender, e) => Links.OpenUrl(source.Items[cell.Position].TwitterUrl);
               // cell.BtnInstagram.TouchUpInside += (sender, e) => Links.OpenUrl(source.Items[cell.Position].InstagramUrl);
				cell.IsCommonNew = false;
			}




            if ((item.IsSharePost) && (!string.IsNullOrWhiteSpace(item.SharedUsername)))
            {
                NSMutableAttributedString shareName = null;

                shareName = new NSMutableAttributedString(

                    str: "Shared from ",
                    font: UIFont.SystemFontOfSize(12),
                    foregroundColor: UIColor.LightGray
                );

                shareName.Append(new NSMutableAttributedString(

                    str: item.SharedUsername,
                    font: UIFont.BoldSystemFontOfSize(12),
                    foregroundColor: UIColor.Black
                ));

                cell.VwShare.Hidden = false;
                cell.LblNameShares.AttributedText = shareName;
            }
            else
            {
                cell.VwShare.Hidden = true;
            }

            cell.ImgImage.RemoveConstraints(cell.ImgImage.Constraints);
            cell.ImgImage.AddConstraint(NSLayoutConstraint.Create(cell.ImgImage, NSLayoutAttribute.Height, NSLayoutRelation.Equal, cell.ImgImage, NSLayoutAttribute.Width, (nfloat)item.ImageAspectRatio, 0));

			cell.LblShares.Text = item.ShareCount.ToString ();
			cell.LblLikes.Text = item.LikeCount.ToString ();
			cell.LblComments.Text = item.CommentCount.ToString ();
			cell.LblTags.Text = item.TagCount.ToString ();


            string[] separators = { "@" };
            string value = item.Username;
            string[] words = value.Split(separators, StringSplitOptions.RemoveEmptyEntries);
            string schoolName = string.Empty;
            string sportsName = string.Empty;

            if (words.Count() > 1)
            {
                for (int i = 0; i < words.Length; i++)
                {
                    schoolName = words[0];
                    sportsName = words[1];
                }
            }
            else
            {
                schoolName = words[0];
            }

            NSMutableAttributedString username = null;

            username = new NSMutableAttributedString(

                str: schoolName,
                font: UIFont.BoldSystemFontOfSize(12),
                foregroundColor: UIColor.Black
            );

            username.Append(new NSMutableAttributedString(

                str: "\n" + sportsName,
                font: UIFont.SystemFontOfSize(12),
                foregroundColor: UIColor.LightGray
            ));

            cell.LblName.AttributedText = username;
			cell.TxtContent.Text = item.Content;
            cell.VwContent.Hidden = string.IsNullOrEmpty(cell.TxtContent.Text);

            cell.BtnOptions.Hidden = user.Id != item.CreatedById;

			cell.ProfileTask?.Cancel (item.ProfileUrl);
			if (!string.IsNullOrEmpty (item.ProfileUrl))
			{
				ImageService.Instance.LoadUrl (item.ProfileUrl).Into (cell.ImgProfile);
				cell.ProfileTask = new ImageLoaderHelper (item.ProfileUrl, cell.ImgProfile, AppDelegate.DefaultProfileString, 150, new CircleTransformation ());
			}
			else
			{
				ImageService.Instance.LoadCompiledResource (AppDelegate.DefaultProfileString).Into(cell.ImgProfile);
			}

			DateTime date = DateTime.SpecifyKind (item.DateCreatedUtc, DateTimeKind.Utc);
			if (date > DateTime.UtcNow)
			{
				date = DateTime.UtcNow;
			}

			cell.LblTimeAgo.Text = TimeAgoHelper.GetTimeAgo(date);

			cell.LblLikes.TextColor = item.IsLiked ? UIColor.FromRGB (21, 21, 21) : UIColor.FromRGB (144, 144, 144);
			cell.BtnLike.SetImage (UIImage.FromBundle (item.IsLiked ? "IconIsLiked" : "IconLike"), UIControlState.Normal);

			cell.LblComments.TextColor = item.IsCommented ? UIColor.FromRGB (21, 21, 21) : UIColor.FromRGB (144, 144, 144);
			cell.BtnComment.SetImage (UIImage.FromBundle (item.IsCommented ? "IconCommented" : "IconComment"), UIControlState.Normal);


            //cell.BtnFacebook.Hidden = string.IsNullOrEmpty(item.FacebookUrl); 
            //cell.BtnTwitter.Hidden = string.IsNullOrEmpty(item.TwitterUrl);
            //cell.BtnInstagram.Hidden = string.IsNullOrEmpty(item.InstagramUrl);

            cell.BtnFacebook.Hidden = true;
            cell.BtnTwitter.Hidden = true;
            cell.BtnInstagram.Hidden = true;

            if (!string.IsNullOrEmpty(item.ImageUrl))
            {
                cell.VwMedia.Hidden = false;
                cell.VwLinkDetails.Hidden = true;
                cell.ImageTask?.Cancel(item.ImageUrl);
                ImageService.Instance.LoadUrl(item.ImageUrl).Into(cell.ImgImage);
                cell.ImageTask = new ImageLoaderHelper(item.ImageUrl, cell.ImgImage, "IconNoImage");

				cell.BtnPlay.Hidden = true;
            }
            else if(!string.IsNullOrEmpty(item.LinkUrl))
            {
                cell.VwMedia.Hidden = false;
                cell.VwLinkDetails.Hidden = false;
                try
                {
                    cell.LblLinkHost.Text = new Uri(item.LinkUrl).Host;
                }
                catch {}

                cell.LblLinkTitle.Text = item.LinkTitle;

				cell.ImageTask?.Cancel(item.LinkImage);
				if (!string.IsNullOrEmpty(item.LinkImage))
				{
					ImageService.Instance.LoadUrl(item.LinkImage).Into(cell.ImgImage);
					cell.ImageTask = new ImageLoaderHelper(item.LinkImage, cell.ImgImage, "IconNoImage");
				}
				else
				{
					ImageService.Instance.LoadCompiledResource("IconNoImage").Into(cell.ImgImage);
				}
                cell.BtnPlay.Hidden = true;
            }
            else if(!string.IsNullOrEmpty(item.VideoUrl))
            {
				cell.VwMedia.Hidden = false;
				cell.VwLinkDetails.Hidden = true;
				cell.ImageTask?.Cancel(item.VideoImageUrl);
				if (!string.IsNullOrEmpty(item.VideoImageUrl))
				{
					ImageService.Instance.LoadUrl(item.VideoImageUrl).Into(cell.ImgImage);
					cell.ImageTask = new ImageLoaderHelper(item.VideoImageUrl, cell.ImgImage, "IconNoImage");
				}
				else
				{
					ImageService.Instance.LoadCompiledResource("IconNoImage").Into(cell.ImgImage);
				}
                cell.BtnPlay.Hidden = false;
            }
            else
            {
				cell.VwMedia.Hidden = true;
            }
		}

		void ImageClicked(string id)
		{
            var item = source.Items.First(m => m.Id == id);
			if (!string.IsNullOrEmpty(item.LinkUrl))
			{
				try
				{
                    UIApplication.SharedApplication.OpenUrl(new NSUrl(item.LinkUrl));
				}
				catch
				{
				}
			}
		}

        void ShareClicked(string id)
        {
            GetBottomViewController(viewController).LoadingScreen.Show();
            var apiTask = new ServiceApi().GetPost(id);
            apiTask.HandleError(GetBottomViewController(viewController).LoadingScreen);
            apiTask.OnSucess(response =>
            {
                GetBottomViewController(viewController).LoadingScreen.Hide();
                var controller = viewController.Storyboard.InstantiateViewController<ShareOptionsViewController>();
                controller.post = response.Result;
                controller.Parent = viewController;
                controller.FeedTable = this;
                controller.ParentLoadingScreen = GetBottomViewController(viewController).LoadingScreen;
                controller.ModalTransitionStyle = UIModalTransitionStyle.CrossDissolve;
                controller.ModalPresentationStyle = UIModalPresentationStyle.OverCurrentContext;
                viewController.NavigationController.PresentViewController(controller, true, null);
            });
        }

        void GoToProfile(string postId)
        {
			var post = source.Items.FirstOrDefault(m => m.Id == postId);
            var user = CrossSettings.Current.GetValueOrDefaultJson<User>("User");
            if(!string.IsNullOrEmpty(post.TeamId))
            {
                Navigator.GoToTeamProfile(viewController.NavigationController, post.TeamId, false);
            }
			else if (!string.IsNullOrEmpty(post.SchoolId))
			{
				Navigator.GoToSchoolProfile(viewController.NavigationController, post.SchoolId, false);
			}
            else if(!string.IsNullOrEmpty(post.ContentSourceId))
            {
				var controller = viewController.Storyboard.InstantiateViewController<ContentSourceProfileViewController>();
                controller.ContentSourceId = post.ContentSourceId;
				viewController.NavigationController.PushViewController(controller, true);
            }
			else if (!string.IsNullOrEmpty(post.SportId))
			{
				Navigator.GoToSportProfile(viewController.NavigationController, post.SportId, false);
			}
            else if(post.CreatedById == user.Id)
            {
				Navigator.GoToUserProfile(viewController.NavigationController, post.CreatedById);
            }
            else if(!string.IsNullOrEmpty(post.CreatedById))
            {
                Navigator.GoToUserProfile(viewController.NavigationController, post.CreatedById);
            }

		}

        void PlayClicked(string postId)
        {
			var post = source.Items.FirstOrDefault(m => m.Id == postId);
			var controller = viewController.Storyboard.InstantiateViewController("ViewVideoViewController") as ViewVideoViewController;
			controller.Url = new NSUrl(post.VideoUrl);
			//controller.InitializeVideo ();
			viewController.NavigationController.PresentViewController(controller, true, () => { });
        }

		void OptionsClicked (string postId)
		{
			var post = source.Items.FirstOrDefault (m => m.Id == postId);
			if(post.CreatedById != CrossSettings.Current.GetValueOrDefaultJson<User>("User").Id)
			{
				return;
			}

			var controller = viewController.Storyboard.InstantiateViewController<PostOptionsViewController> ();
			controller.ModalPresentationStyle = UIModalPresentationStyle.OverCurrentContext;
			controller.ModalTransitionStyle = UIModalTransitionStyle.CrossDissolve;
			controller.PostId = postId;
			controller.GetNewsFeedItems = GetNewsFeedData;
            controller.CustomNavigationController = viewController.NavigationController;
			viewController.PresentViewController (controller, true, null);
		}

		void PostDetailsClicked (string postId, string controller)
		{
			var postDetailsController = viewController.Storyboard.InstantiateViewController<PostDetailsViewController> ();
			postDetailsController.PostId = postId;
			postDetailsController.Controller = controller;
			viewController.NavigationController.PushViewController (postDetailsController, true);
		}

		void LikeClicked (int position, UIButton btnLike, UILabel lblLikes)
		{
			var item = source.Items [position];
			btnLike.Enabled = false;

			if (item.IsLiked)
			{
				var apiTask = new ServiceApi ().UnlikePost (item.Id);
				apiTask.HandleError (null, true, () =>
				{
					btnLike.Enabled = true;
				});
				apiTask.OnSucess ((response) =>
				{
					HandleLikeResult (false, position, btnLike, lblLikes);
				});
			}
			else
			{
				var apiTask = new ServiceApi ().LikePost (item.Id);
				apiTask.HandleError (null, true, () =>
				{
					btnLike.Enabled = true;
				});
				apiTask.OnSucess ((response) =>
				{
					HandleLikeResult (true, position, btnLike, lblLikes);
				});
			}
		}

		void HandleLikeResult (bool isLIked, int position, UIButton btnLike, UILabel lblLikes)
		{
			source.Items [position].LikeCount = source.Items [position].LikeCount + (isLIked ? 1 : -1);
			source.Items [position].IsLiked = isLIked;
			lblLikes.Text = source.Items [position].LikeCount.ToString ();
			btnLike.Enabled = true;
			ReloadData ();
		}

		public void OnScroll (UIScrollView scrollView)
		{
			if (scrollView.ContentOffset.Y + Frame.Height + 100 > scrollView.ContentSize.Height && !isLoadingData && Frame.Height < scrollView.ContentSize.Height && itemsLoaded >= 20)
			{
				GetNewsFeedData (false);
			}
		}
	}
}
