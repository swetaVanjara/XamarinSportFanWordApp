// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Fanword.Poco.Models;
using System.Collections.Generic;
using Mobile.Extensions.iOS.Sources;
using Fanword.Shared;
using Mobile.Extensions.iOS.Extensions;
using System.Linq;
using System.IO;
using System.Diagnostics;
using Fanword.iOS.Shared;
using Fanword.Shared.Helpers;

namespace Fanword.iOS
{
	public partial class TagEventsViewController : BaseViewController
	{
        public Post Post;
        CustomCollectionSource<DateTime> daysSource;
        CustomListSource<EventProfile> eventsSource;
        DateTime currentTime;
        EventSearch result;
		public TagEventsViewController (IntPtr handle) : base (handle)
		{
		}

		public override UIStatusBarStyle PreferredStatusBarStyle()
		{
			return UIStatusBarStyle.LightContent;
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			ShowHelpIfNecessary(TutorialHelper.TagEvents);

			btnBack.TouchUpInside += (sender, e) => NavigationController.PopViewController(true);
            var times = new List<DateTime>();
            currentTime = DateTime.Now.Date.ToUniversalTime();
            var startTime = DateTime.Now.Date.ToUniversalTime().AddDays(-2);
            for (int i = 0; i < 5; i++)
            {
                times.Add(startTime.AddDays(i));
            }

			var layout = cvDates.CollectionViewLayout as UICollectionViewFlowLayout;
            layout.ItemSize = new CoreGraphics.CGSize(UIScreen.MainScreen.Bounds.Width / 5, cvDates.Frame.Height);

            daysSource = new CustomCollectionSource<DateTime>(times, GetCollectionCell);
            daysSource.ItemClick += (sender, e) => 
            {
                currentTime = e;
                cvDates.ReloadData();
                GetData();
            };
            cvDates.Source = daysSource;

            tvEvents.EstimatedRowHeight = 100;
            tvEvents.RowHeight = UITableView.AutomaticDimension;
            eventsSource = new CustomListSource<EventProfile>(new List<EventProfile>(), GetCell, (arg1, arg2) => UITableView.AutomaticDimension);
            eventsSource.NoContentText = "No Events";
			eventsSource.ItemClick += (sender, e) =>
			{
				if (Post.Events.Contains((e.Id)))
				{
					Post.Events.Remove(e.Id);
				}
				else
				{
					Post.Events.Add(e.Id);
				}

				tvEvents.ReloadData();
			};
            tvEvents.Source = eventsSource;
            GetData();

            btnPost.TouchUpInside += (sender, e) => 
            {
                if(Post.Videos.Any(m => string.IsNullOrEmpty(m.Id)))
                {
					var controller = UIAlertController.Create("Video Upload", "You video will be uploaded in the background and the post will be made visible once the upload is complete", UIAlertControllerStyle.Alert);
					controller.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, (obj) =>
					{
						SavePost();
					}));
					PresentViewController(controller, true, null);
                }
                else
                {
                    SavePost();
                }

            };

            if(!string.IsNullOrEmpty(Post.Id))
            {
                btnShare.Hidden = true;
            }

            btnShare.TouchUpInside += (sender, e) =>
            {
                UIActionSheet sheet = new UIActionSheet("Share On");
                if(Post.Images.Any() || Post.Links.Any() || Post.Videos.Any())
                {
					sheet.AddButton("Facebook");
                }
                sheet.AddButton("Other");
                sheet.AddButton("Cancel");
                sheet.Clicked += async (sender2, e2) =>
                {
                    nint index = e2.ButtonIndex;
                    if (!Post.Images.Any() && !Post.Links.Any() && !Post.Videos.Any())
                    {
                        index++;
                    }
					if (index == 0)
                    {
                        await Sharer.ShareFacebook(this, Post);
                        Post.IsShared = true;
                    }
                    else if (index == 1)
                    {
                        await Sharer.ShareOther(this, Post,() => 
                        {
                            Post.IsShared = true;
                        });
                    }

                };
                sheet.ShowInView(View);
            };
        }

        void SavePost()
        {
			LoadingScreen.Show();
			var apiTask = new ServiceApi().SavePost(Post);
			apiTask.HandleError(LoadingScreen);
			apiTask.OnSucess(respons =>
			{
                MainViewController.PostId = "Refresh";
				NavigationController.PopToViewController(NavigationController.ViewControllers.FirstOrDefault(m => m is MainViewController), true);
			});
        }

        public UICollectionViewCell GetCollectionCell(UICollectionView collectionView, NSIndexPath indexPath, DateTime item)
        {
            var cell = collectionView.DequeueReusableCell("DateCell", indexPath) as DateCell;
            cell.SetData(item, currentTime);
            return cell;
        }

		public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath, EventProfile item)
		{
			var cell = tableView.DequeueReusableCell("EventProfileCell", indexPath) as EventProfileCell;
			cell.SetData(item, Post.Events);
			cell.SelectionStyle = UITableViewCellSelectionStyle.None;
			return cell;
		}

        void GetData()
        {
			var apiTask = new ServiceApi().SearchEvents(currentTime);
			apiTask.HandleError();
			apiTask.OnSucess(response =>
			{
				if (response.Result.SearchTime == currentTime)
				{
					result = response.Result;
					eventsSource.Items = response.Result.Events;
					tvEvents.ReloadData();
				}
			});
        }
	}
}
