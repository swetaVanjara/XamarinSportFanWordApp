// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Fanword.Shared;
using Mobile.Extensions.iOS.Extensions;
using Mobile.Extensions.iOS.Sources;
using Fanword.Poco.Models;
using System.Linq;
using Fanword.Shared.Helpers;

namespace Fanword.iOS
{
	public partial class CommentsViewController : BaseViewController, IPostDetails
	{
		public string PostId { get; set; }
		public int Count { get; set; }
		public string Name => "Comments";
		CustomListSource<Comment> source;
		public Action<string, int> UpdateParent;
		string expandedCommentId;
		public CommentsViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			tvComments.EstimatedRowHeight = 150;
			tvComments.RowHeight = UITableView.AutomaticDimension;

			btnSend.TouchUpInside += (sender, e) =>
			{
				View.EndEditing (true);
				if (string.IsNullOrEmpty (txtComment.Text))
					return;

				var apiTask = new ServiceApi ().SaveComment (txtComment.Text, PostId, expandedCommentId);
				apiTask.HandleError ();
				apiTask.OnSucess (response =>
				 {
					 txtComment.Text = "";
					 
					 GetData ();
				 });
			};

			GetData ();
		}

		void GetData ()
		{
			var apiTask = new ServiceApi ().GetComments (PostId);
			apiTask.HandleError ();
			apiTask.OnSucess (response =>
			{
				
				source = new CustomListSource<Comment> (response.Result, GetCell, (arg1, arg2) => UITableView.AutomaticDimension);
				source.Items = CommentsHelper.GetCommentsWithReply (source.AllItems, expandedCommentId);
				source.NoContentText = "No Comments";
				tvComments.Source = source;
				Count = response.Result.Count;
				LoadingScreen.Hide ();

				UpdateParent?.Invoke (Name, Count);

				tvComments.ReloadData ();
				if (response.Result.Any ())
				{
					tvComments.ScrollToRow (NSIndexPath.FromRowSection (source.Items.Count - 1, 0), UITableViewScrollPosition.Bottom, false);
				}
			});
		}

		void SetExpandedCommentId (string commentId)
		{
			if (string.IsNullOrEmpty (commentId))
			{
				txtComment.Placeholder = "Comment...";
			}
			else
			{
				var source = tvComments.Source as CustomListSource<Comment>;
				var model = source.AllItems.FirstOrDefault (m => m.Id == commentId);
				txtComment.Placeholder = "Reply to " + model.Username;
			}
			expandedCommentId = commentId;
		}

		public UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath, Comment item)
		{
			var cell = tableView.DequeueReusableCell ("CommentCell", indexPath) as CommentCell;
			cell.SetData (item, LikeClicked, ReplyClicked);
			cell.SelectionStyle = UITableViewCellSelectionStyle.None;
			return cell;
		}

		void ReplyClicked (Comment model)
		{
			var source = tvComments.Source as CustomListSource<Comment>;

			var newExpandedCommentId = string.IsNullOrEmpty (model.ParentCommentId) ? model.Id : model.ParentCommentId;
			if (expandedCommentId == newExpandedCommentId)
			{
				SetExpandedCommentId (null);
				source.Items = CommentsHelper.GetCommentsWithReply (source.AllItems, expandedCommentId);
				tvComments.ReloadData ();
				return;
			}

			SetExpandedCommentId (newExpandedCommentId);
			source.Items = CommentsHelper.GetCommentsWithReply (source.AllItems, expandedCommentId);
			tvComments.ReloadData ();
		}

		void LikeClicked (Comment item, UIButton btnLike, UILabel lblLikes)
		{
			int position = source.Items.FindIndex (m => m.Id == item.Id);
			btnLike.Enabled = false;

			if (item.IsLiked)
			{
				var apiTask = new ServiceApi ().UnlikeComment (item.Id);
				apiTask.HandleError (null, true, () =>
				{
					btnLike.Enabled = true;
				});
				apiTask.OnSucess ((response) =>
				{
					HandleLikeResult (false, position, btnLike, lblLikes);
				});
			}
			else
			{
				var apiTask = new ServiceApi ().LikeComment (item.Id);
				apiTask.HandleError (null, true, () =>
				{
					btnLike.Enabled = true;
				});
				apiTask.OnSucess ((response) =>
				{
					HandleLikeResult (true, position, btnLike, lblLikes);
				});
			}
		}

		void HandleLikeResult (bool isLIked, int position, UIButton btnLike, UILabel lblLikes)
		{
			source.Items [position].LikeCount = source.Items [position].LikeCount + (isLIked ? 1 : -1);
			source.Items [position].IsLiked = isLIked;
			lblLikes.Text = source.Items [position].LikeCount.ToString ();
			btnLike.Enabled = true;
			tvComments.ReloadData ();
		}
	}
}
