// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Mobile.Extensions.iOS.Extensions;
using Plugin.Settings;
using Mobile.Extensions.Extensions;
using Fanword.Poco.Models;
using Plugin.Media;
using Fanword.Shared;
using Plugin.Media.Abstractions;
using System.IO;
using FFImageLoading;
using FFImageLoading.Transformations;
using System.Threading.Tasks;

namespace Fanword.iOS
{
	public partial class OnboardingCreateProfileViewController : BaseViewController
	{
		bool? IsAthlete;
		string ImageFilePath;
		public OnboardingCreateProfileViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			var user = CrossSettings.Current.GetValueOrDefaultJson<User> ("User");

			lblName.Text = user.FirstName + " " + user.LastName;

			btnYes.TouchUpInside += (sender, e) =>
			{
				IsAthlete = true;
				SetCheckboxes ();
			};

			btnNo.TouchUpInside += (sender, e) =>
			{
				IsAthlete = false;
				SetCheckboxes ();
			};

			btnUpload.TouchUpInside += (sender, e) =>
			{
				var alert = new UIAlertView ();
				alert.Title = "Profile Image";
				alert.Message = "Choose a way to add a profile image";
				alert.AddButton ("Take Photo");
				alert.AddButton ("Pick Photo");
				alert.AddButton ("Cancel");
				alert.Clicked += async (sender2, e2) =>
				{
					await Task.Delay (450);
					if (e2.ButtonIndex == 0)
					{
						TakePhoto ();
					}
					else if (e2.ButtonIndex == 1)
					{
						PickPhoto ();
					}
				};
				alert.Show ();
			};

			btnDone.TouchUpInside += async (sender, e) =>
			{
				if (IsAthlete == true)
				{
					var controller = Storyboard.InstantiateViewController<OnboardingAthleteTeamViewController> ();
					controller.ImageFilePath = ImageFilePath;
					NavigationController.PushViewController (controller, true);
				}
				else if (IsAthlete == false)
				{
					// Save user profile then go to feed
					LoadingScreen.Show ();

					var error = await new ServiceApi ().SaveUser (ImageFilePath);
					LoadingScreen.Hide ();

					if (error.DisplayErrorMessage ())
						return;

					var controller = Storyboard.InstantiateViewController<MainViewController> ();
					NavigationController.PushViewController (controller, true);
				}

			};

			btnUpload.Layer.BorderWidth = 1;
			btnUpload.Layer.BorderColor = UIColor.FromRGB (144,144,144).CGColor;
		}

		void SetCheckboxes ()
		{
			btnDone.SetTitleColor (UIColor.White, UIControlState.Normal);
			btnDone.BackgroundColor = UIColor.FromRGB (249, 95, 6);
			if (IsAthlete == true)
			{
				btnYes.SetImage (UIImage.FromBundle ("IconChecked"), UIControlState.Normal);
				btnNo.SetImage (UIImage.FromBundle ("IconUnchecked"), UIControlState.Normal);
				btnDone.SetTitle ("Next", UIControlState.Normal);
			
			}
			else if (IsAthlete == false)
			{
				btnYes.SetImage (UIImage.FromBundle ("IconUnchecked"), UIControlState.Normal);
				btnNo.SetImage (UIImage.FromBundle ("IconChecked"), UIControlState.Normal);
				btnDone.SetTitle ("Done", UIControlState.Normal);
			}
		}

		async void TakePhoto ()
		{
			try
			{
				await CrossMedia.Current.Initialize ();
				if (!CrossMedia.Current.IsCameraAvailable || !CrossMedia.Current.IsTakePhotoSupported)
				{
					new UIAlertView ("Camera", "Camera Not Available", null, "Ok", null).Show ();
					return;
				}

				var file = await AppMedia.TakePhotoAsync (50, 70);

				AddFile (file);
			}
			catch { }
		}

		async void PickPhoto ()
		{
			try
			{
				await CrossMedia.Current.Initialize ();
				if (!CrossMedia.Current.IsPickPhotoSupported)
				{
					new UIAlertView ("Photo Library", "Photo Library Not Available", null, "Ok", null).Show ();
					return;
				}

				var file = await AppMedia.PickPhotoAsync (50, 70);
				AddFile (file);
			}
			catch { }
		}

		void AddFile (MediaFile file)
		{
			if (file == null)
				return;

			// Moving the file because I can't open it where it normally gets placed
			var myFolder = Environment.GetFolderPath (Environment.SpecialFolder.Personal);
			var newLocation = Path.Combine (myFolder, Path.GetFileName (file.Path));
			File.Copy (file.Path, newLocation);
			try
			{
				File.Delete (file.Path);
			}
			catch { }

			ImageService.Instance.LoadFile (newLocation).Transform(new CircleTransformation()).Into (imgProfile);
			ImageFilePath = newLocation;
		}
	}
}
