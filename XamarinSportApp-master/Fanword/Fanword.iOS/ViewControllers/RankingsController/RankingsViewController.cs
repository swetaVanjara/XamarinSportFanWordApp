// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Mobile.Extensions.iOS.Sources;
using Fanword.Poco.Models;
using Fanword.Shared;
using Mobile.Extensions.iOS.Extensions;

namespace Fanword.iOS
{
	public partial class RankingsViewController : BaseViewController
	{
		UIRefreshControl refreshControl;
		CustomListSource<Ranking> source;
		bool mySchools;
		bool mySports;
		bool myTeams;
        public string SchoolId;
		public RankingsViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			tvRankings.EstimatedRowHeight = 100;
			tvRankings.RowHeight = UITableView.AutomaticDimension;
			if (string.IsNullOrEmpty(SchoolId))
			{
				mySchools = true;
				mySports = true;
				myTeams = true;
			}
			GetData ();

			btnFilter.TouchUpInside += (sender, e) =>
			{
				var controller = Storyboard.InstantiateViewController<FollowFilterViewController> ();
				controller.MyTeams = myTeams;
				controller.MySports = mySports;
				controller.MySchools = mySchools;
				controller.SetValues = () =>
				{
					myTeams = controller.MyTeams;
					mySports = controller.MySports;
					mySchools = controller.MySchools;
					GetData ();
				};
				controller.ModalPresentationStyle = UIModalPresentationStyle.OverCurrentContext;
				controller.ModalTransitionStyle = UIModalTransitionStyle.CrossDissolve;
				PresentViewController (controller, true, null);
			};

			refreshControl = new UIRefreshControl();
			tvRankings.AddSubview(refreshControl);
			refreshControl.AddTarget((sender, e) => GetData(), UIControlEvent.ValueChanged);
			if (UIDevice.CurrentDevice.CheckSystemVersion(10, 0))
			{
				tvRankings.RefreshControl = refreshControl;
			}
		}

		void GetData ()
		{
			var filter = new FollowingFilterModel ();
			filter.MySchools = mySchools;
			filter.MySports = mySports;
			filter.MyTeams = myTeams;
            filter.SchoolId = SchoolId;
			var apiTask = new ServiceApi ().GetRankings (filter);
			apiTask.HandleError ();
			apiTask.OnSucess (response =>
			{
				if (tvRankings.Source == null)
				{
					source = new CustomListSource<Ranking> (response.Result, GetCell, (arg1, arg2) => UITableView.AutomaticDimension);
					source.NoContentText = "No Rankings";
					tvRankings.Source = source;
					tvRankings.ReloadData ();
				}
				else
				{
					source.Items = response.Result;
					tvRankings.ReloadData ();
				}
                refreshControl.EndRefreshing();
			 });
		} 

        public void HideFilter()
        {
            btnFilter.Superview.Hidden = true;
        }


		public UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath, Ranking item)
		{
			var cell = tableView.DequeueReusableCell ("RankingCell", indexPath) as RankingCell;
			cell.SetData (item, FollowClicked, NavigationController);
			cell.SelectionStyle = UITableViewCellSelectionStyle.None;
			return cell;
		}

		void FollowClicked (Ranking item, UIButton btnFollow)
		{
			var model = item;
			var oldText = btnFollow.Title(UIControlState.Normal);
			btnFollow.SetTitle("Loading", UIControlState.Normal);
			if (model.IsFollowing)
			{
				var apiTask = new ServiceApi ().UnfollowTeam (model.TeamId);
				apiTask.HandleError (null, true, () =>
				{
					btnFollow.SetTitle(oldText, UIControlState.Normal);
				});
				apiTask.OnSucess (response =>
				 {
					 model.IsFollowing = false;
					 tvRankings.ReloadData ();
				 });
			}
			else
			{
				var apiTask = new ServiceApi ().FollowTeam (model.TeamId);
				apiTask.HandleError (null, true, () =>
				{
					btnFollow.SetTitle(oldText, UIControlState.Normal);
				});
				apiTask.OnSucess (response =>
				{
					model.IsFollowing = true;
					tvRankings.ReloadData ();
				});
			}
		}
	}
}
