// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Foundation;
using UIKit;
using Mobile.Extensions.iOS.Extensions;
using Plugin.Settings;
using Mobile.Extensions.Extensions;
using Fanword.Poco.Models;
using Fanword.iOS.Shared;
using FFImageLoading;
using FFImageLoading.Cache;
using Fanword.Shared.Service;
using Plugin.PushNotifications;
using Fanword.Shared.Helpers;

namespace Fanword.iOS
{
	public partial class MainViewController : BaseViewController
	{
		public static MainViewController Instance;
        public static string PostId { get; set; }
		HomeViewController homeController;

		bool IsMenuOpen;
		public MenuViewController SlideOutMenuController;
		public static bool GoToNotifications;
		public MainViewController (IntPtr handle) : base (handle)
		{
			Instance = this;

		}

		public override UIStatusBarStyle PreferredStatusBarStyle ()
		{
			return UIStatusBarStyle.LightContent;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

#if !ENABLE_TEST_CLOUD
			var notificationSettings = UIUserNotificationSettings.GetSettingsForTypes (UIUserNotificationType.Alert | UIUserNotificationType.Badge | UIUserNotificationType.Sound, null);
			UIApplication.SharedApplication.RegisterUserNotificationSettings (notificationSettings);
			UIApplication.SharedApplication.RegisterForRemoteNotifications ();
#endif

            ShowHelpIfNecessary(TutorialHelper.Welcome, () =>
            {
                ShowHelpIfNecessary(TutorialHelper.FindFavorites);
            });

			SlideOutMenuController = Storyboard.InstantiateViewController<MenuViewController> ();
			SlideOutMenuController.View.Frame = new CGRect (-UIScreen.MainScreen.Bounds.Width, 0, UIScreen.MainScreen.Bounds.Width - 60, UIScreen.MainScreen.Bounds.Height);
            SlideOutMenuController.MenuItemClick = MenuItemClicked;
			View.Add (SlideOutMenuController.View);
			AddChildViewController (SlideOutMenuController);

			homeController = Storyboard.InstantiateViewController<HomeViewController> ();
			AddChildViewController (homeController);
			vwContent.Add (homeController.View);
			homeController.View.AddMatchParentSizeConstraints ();
			//MenuItemClicked (5);
			bool touchStartAccepted = false; 
			UIPanGestureRecognizer pan = new UIPanGestureRecognizer ((gesture) =>
			{
				if (gesture.State == UIGestureRecognizerState.Began)
				{
					View.EndEditing (true);
					var location = gesture.LocationInView (View);
					if ((location.X < 35 && !IsMenuOpen) || IsMenuOpen)
					{
						touchStartAccepted = true;
					}
					else
					{
						touchStartAccepted = false;
					}
				}
				else if (gesture.State == UIGestureRecognizerState.Changed)
				{
					if (touchStartAccepted)
					{
						UIView.Animate (.1f, () =>
						 {
							 var f = SlideOutMenuController.View.Frame;
							 f.X = (nfloat)Math.Min (gesture.LocationInView (View).X - f.Width, 0);
							 SlideOutMenuController.View.Frame = f;
							 vwDarkenView.Alpha = (nfloat)Math.Min (Math.Abs (gesture.LocationInView (View).X) / UIScreen.MainScreen.Bounds.Width, 0.75);
						 });
					}
				}
				else if (gesture.State == UIGestureRecognizerState.Ended)
				{
					if (touchStartAccepted)
					{
						var velocity = gesture.VelocityInView (View);
						if (velocity.X < 0)
						{
							AnimateMenuClosed ();
						}
						else
						{
							AnimateMenuOpen ();
						}
					}
				}
			})
			{ CancelsTouchesInView = false };
			pan.ShouldRecognizeSimultaneously = new UIGesturesProbe ((gestureRecognizer, otherGestureRecognizer) =>
			{
				if (otherGestureRecognizer is UITapGestureRecognizer)
				{
					return false;
				}

				if (otherGestureRecognizer is UIPanGestureRecognizer)
				{
					var other = otherGestureRecognizer as UIPanGestureRecognizer;
					if (other.View == SlideOutMenuController.GetMenu ())
					{
						return false;
					}
				}

				return true;
			});

			View.AddGestureRecognizer (pan);

			vwDarkenView.AddGestureRecognizer (new UITapGestureRecognizer ((gesture) =>
			{
				AnimateMenuClosed ();
			}));

            var user = CrossSettings.Current.GetValueOrDefaultJson<User>("User");
            InvokeOnMainThread(() =>
            {
				CrossPushNotifications.Current.Register(new string[] { user.Id });
            });

            if(AppDelegate.ClickedNotification != null)
            {
                Navigator.HandleNotificationTap(NavigationController, AppDelegate.ClickedNotification.MetaData, AppDelegate.ClickedNotification.Title, AppDelegate.ClickedNotification.Message);
                AppDelegate.ClickedNotification = null;
            }

		}

        public void GetNotifications()
        {
            homeController.GetNotifications();
        }

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
            SlideOutMenuController.UpdateProfile();
            homeController?.GetNotifications();
			/*
			if (NewsFeedController != null)
			{
				if (AppDelegate.ShouldReloadFeed)
				{
					NewsFeedController.GetNewsFeedData (true);
					AppDelegate.ShouldReloadFeed = false;
				}

				NewsFeedController.GetNotifications ();
			}*/
		}

		public override void ViewDidLayoutSubviews ()
		{
			base.ViewDidLayoutSubviews ();
			if (homeController != null)
			{
				var f = homeController.View.Frame;
				f.Height = vwContent.Frame.Height;
				f.Width = vwContent.Frame.Width;
				homeController.View.Frame = f;
				if (GoToNotifications)
				{
					//MenuItemClicked (4);
					GoToNotifications = false;
				}
			}
		}

		public void AnimateMenuOpen ()
		{
			IsMenuOpen = true;
            ShowHelpIfNecessary(TutorialHelper.Menu);
			UIView.Animate (.3, () =>
			 {
				 var f = SlideOutMenuController.View.Frame;
				 f.X = 0;
				 SlideOutMenuController.View.Frame = f;
				 vwDarkenView.Alpha = 0.75f;
			 });
		}

		public void AnimateMenuClosed ()
		{
			IsMenuOpen = false;
			UIView.Animate (.3, () =>
			 {
				 var f = SlideOutMenuController.View.Frame;
				 f.X = -UIScreen.MainScreen.Bounds.Width;
				 SlideOutMenuController.View.Frame = f;
				 vwDarkenView.Alpha = 0;
			 });
		}

		public void Logout ()
		{
			var controller = UIAlertController.Create("Confirm", "Are you sure you want to logout?", UIAlertControllerStyle.Alert);

            controller.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Default, (obj) => {}));
			controller.AddAction(UIAlertAction.Create("Logout", UIAlertActionStyle.Default, (obj) =>
			{
				ImageService.Instance.InvalidateCacheAsync(CacheType.All);
				CrossSettings.Current.Clear();
				SlideOutMenuController.View.RemoveFromSuperview();
				UIApplication.SharedApplication.UnregisterForRemoteNotifications();
				MainViewController.Instance = null;
				NavigationController.PopToRootViewController(true);
			}));

			PresentViewController(controller, true, null);
		}

		public void MenuItemClicked (string id)
		{
			UIViewController controller = null;
			if (id == "Home")
			{
				controller = homeController;
			}
			else if (id == "Profile")
			{
				var user = CrossSettings.Current.GetValueOrDefaultJson<User>("User");
				Navigator.GoToUserProfile(NavigationController, user.Id);
			}
			else if (id == "BecomeAdvertiser")
			{
				if (!CrossSettings.Current.GetValueOrDefault(TutorialHelper.BecomeAdvertiser.Id, false))
				{
					ShowHelpIfNecessary(TutorialHelper.BecomeAdvertiser);
					return;
				}
                UIApplication.SharedApplication.OpenUrl(new NSUrl(ServiceApiBase.MvcPortalURL + "/Registration/Advertisers"));
            }
			else if (id == "CreateContentSource")
			{
                var contentSourceController = Storyboard.InstantiateViewController<ContentSourceInfoViewController>();
                NavigationController.PushViewController(contentSourceController, true);

            }
			else if (id == "Teams")
			{
                var pushController = Storyboard.InstantiateViewController<SearchViewContrroller>();
                pushController.Type = FeedType.Team;
                pushController.UseType = true;
				NavigationController.PushViewController(pushController, true);
			}
			else if (id == "Schools")
			{
				var pushController = Storyboard.InstantiateViewController<SearchViewContrroller>();
				pushController.Type = FeedType.School;
				pushController.UseType = true;
				NavigationController.PushViewController(pushController, true);
			}
			else if (id == "Sports")
			{
				var pushController = Storyboard.InstantiateViewController<SearchViewContrroller>();
				pushController.Type = FeedType.Sport;
				pushController.UseType = true;
				NavigationController.PushViewController(pushController, true);
			}
			else if (id == "ContentSources")
			{
				var pushController = Storyboard.InstantiateViewController<SearchViewContrroller>();
				pushController.Type = FeedType.ContentSource;
				pushController.UseType = true;
				NavigationController.PushViewController(pushController, true);
			}
			else if (id == "Users")
			{
				var pushController = Storyboard.InstantiateViewController<SearchViewContrroller>();
				pushController.Type = FeedType.User;
				pushController.UseType = true;
				NavigationController.PushViewController(pushController, true);
			}
			else if (id == "Settings")
			{
				var pushController = Storyboard.InstantiateViewController<SettingsViewController>();
				NavigationController.PushViewController(pushController, true);
			}
			else if (id == "Logout")
			{
				Logout();
            }

            if(controller != null)
            {
				if (controller.View.Superview == null)
				{
					AddChildViewController(controller);
					vwContent.AddSubview(controller.View);
					controller.View.AddMatchParentSizeConstraints();
				}
				else
				{
					var name = controller.GetType().Name;
					//MetricsManager.TrackEvent (name);
					vwContent.BringSubviewToFront(controller.View);

				} 
            }
			
			AnimateMenuClosed ();
		}
	}
}
