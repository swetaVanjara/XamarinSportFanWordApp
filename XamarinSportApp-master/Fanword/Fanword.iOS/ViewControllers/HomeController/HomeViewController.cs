// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Plugin.Settings;
using System.Collections.Generic;
using Mobile.Extensions.iOS.Extensions;
using Fanword.Shared;
using System.Linq;
using Fanword.Shared.Helpers;

namespace Fanword.iOS
{
	public partial class HomeViewController : BaseViewController
	{
        ScoresViewController scoresController;
		public HomeViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			btnMenu.TouchUpInside += (sender, e) =>
			{
				MainViewController.Instance.AnimateMenuOpen ();
			};

			var layout = cvPager.CollectionViewLayout as UICollectionViewFlowLayout;
			layout.ItemSize = new CoreGraphics.CGSize (UIScreen.MainScreen.Bounds.Width, UIScreen.MainScreen.Bounds.Height - 120);

			var controllers = new List<UIViewController> ();
			var feedController = Storyboard.InstantiateViewController<FeedViewController> ();
			AddChildViewController (feedController);
			controllers.Add (feedController);

			scoresController = Storyboard.InstantiateViewController<ScoresViewController> ();
			AddChildViewController (scoresController);
			controllers.Add (scoresController);

			var rankingsController = Storyboard.InstantiateViewController<RankingsViewController> ();
			AddChildViewController (rankingsController);
			controllers.Add (rankingsController);

			var source = new CustomCollectionSource<UIViewController> (controllers, GetCell);
			cvPager.Source = source;
			cvPager.ReloadData ();

			cvPager.Delegate = null;

			cvPager.Scrolled += (sender, e) =>
			{
				int position = (int)(cvPager.ContentOffset.X / UIScreen.MainScreen.Bounds.Width);
				if (cvPager.ContentOffset.X % UIScreen.MainScreen.Bounds.Width > (UIScreen.MainScreen.Bounds.Width / 2f))
				{
					position++;
				}

                if(position == 1)
                {
					ShowHelpIfNecessary(TutorialHelper.SchedulesScores);
                }

				SetButtonColor (position);

				lcIndicatorLeading.Constant = cvPager.ContentOffset.X / 3f;
			};

			btnFeed.TouchUpInside += (sender, e) =>
			{
				ScrollToPosition (0);
			};

			btnScores.TouchUpInside += (sender, e) =>
			{
				ScrollToPosition (1);
			};

			btnRankings.TouchUpInside += (sender, e) =>
			{
				ScrollToPosition (2);
			};

            btnSearch.TouchUpInside += (sender, e) => 
            {
                var controller = Storyboard.InstantiateViewController<SearchViewContrroller>();
                NavigationController.PushViewController(controller, true);
            };

            btnNotifications.TouchUpInside += (sender, e) => 
            {
				var controller = Storyboard.InstantiateViewController<NotificationsViewController>();
				NavigationController.PushViewController(controller, true);
			};

            btnExplore.TouchUpInside += (sender, e) => 
            {
				var controller = Storyboard.InstantiateViewController<FavoritesViewController>();
				NavigationController.PushViewController(controller, true);
			};

            lblNotificationCount.Superview.Hidden = true;
            GetNotifications();
		}


        public void GetNotifications()
        {
			var apiTask = new ServiceApi().GetNotifcations();
			apiTask.HandleError();
			apiTask.OnSucess((response) =>
			{
                var count = response.Result.Count(m => !m.IsRead);
                lblNotificationCount.Text = count.ToString();
                if(count > 0)
                {
                    lblNotificationCount.Superview.Hidden = false;
                }
                else
                {
					lblNotificationCount.Superview.Hidden = true;
                }
			});

            scoresController.GetData();
        }

		void SetButtonColor (int position)
		{
			btnFeed.SetTitleColor (UIColor.FromRGB (144, 144, 144), UIControlState.Normal);
			btnScores.SetTitleColor (UIColor.FromRGB (144, 144, 144), UIControlState.Normal);
			btnRankings.SetTitleColor (UIColor.FromRGB (144, 144, 144), UIControlState.Normal);
			if (position == 0)
			{
				btnFeed.SetTitleColor (UIColor.White, UIControlState.Normal);
			}
			else if (position == 1)
			{
				btnScores.SetTitleColor (UIColor.White, UIControlState.Normal);
			}
			else if (position == 2)
			{
				btnRankings.SetTitleColor (UIColor.White, UIControlState.Normal);
			}

		}

		void ScrollToPosition (int position)
		{
			cvPager.ScrollToItem (NSIndexPath.FromRowSection (position, 0), UICollectionViewScrollPosition.None, true);
		}
		public UICollectionViewCell GetCell (UICollectionView collectionView, NSIndexPath indexPath, UIViewController item)
		{
			var cell = collectionView.DequeueReusableCell ("HomeCell", indexPath) as UICollectionViewCell;
			if (item.View.Superview == null)
			{
				cell.Add (item.View);
				var frame = item.View.Frame;
				frame.Width = cell.Frame.Width;
				frame.Height = cell.Frame.Height;
				item.View.Frame = frame;
			}
			return cell;
		}
	}
}
