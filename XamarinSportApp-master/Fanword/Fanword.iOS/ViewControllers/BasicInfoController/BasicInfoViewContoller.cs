// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using System.Threading.Tasks;
using Fanword.Poco.Models;
using Fanword.Shared;
using FFImageLoading;
using FFImageLoading.Transformations;
using Foundation;
using Mobile.Extensions.Extensions;
using Plugin.Media;
using Plugin.Media.Abstractions;
using Plugin.Settings;
using UIKit;

namespace Fanword.iOS
{
	public partial class BasicInfoViewContoller : BaseViewController
	{
		public BasicInfoViewContoller (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			btnBack.TouchUpInside += (sender, e) => NavigationController.PopViewController(true);

			var user = CrossSettings.Current.GetValueOrDefaultJson<User>("User");

			if (!string.IsNullOrEmpty(user.ProfileUrl))
				ImageService.Instance.LoadUrl(user.ProfileUrl).Retry(3, 300).Transform(new CircleTransformation()).Into(imgProfile);

			lblEmail.Text = user.Email;
			lblFirstName.Text = user.FirstName;
			lblLastName.Text = user.LastName;

			btnUpload.Layer.BorderWidth = 1;
			btnUpload.Layer.BorderColor = UIColor.FromRGB(144, 144, 144).CGColor;

			btnUpload.TouchUpInside += (sender, e) =>
			{
				var alert = new UIAlertView();
				alert.Title = "Profile Image";
				alert.Message = "Choose a way to add a profile image";
				alert.AddButton("Take Photo");
				alert.AddButton("Pick Photo");
				alert.AddButton("Cancel");
				alert.Clicked += async (sender2, e2) =>
				{
					await Task.Delay(450);
					if (e2.ButtonIndex == 0)
					{
						TakePhoto();
					}
					else if (e2.ButtonIndex == 1)
					{
						PickPhoto();
					}
				};
				alert.Show();
			};

		}

		async void TakePhoto()
		{
			try
			{
				await CrossMedia.Current.Initialize();
				if (!CrossMedia.Current.IsCameraAvailable || !CrossMedia.Current.IsTakePhotoSupported)
				{
					new UIAlertView("Camera", "Camera Not Available", null, "Ok", null).Show();
					return;
				}

				var file = await AppMedia.TakePhotoAsync(50, 70);

				AddFile(file);
			}
			catch { }
		}

		async void PickPhoto()
		{
			try
			{
				await CrossMedia.Current.Initialize();
				if (!CrossMedia.Current.IsPickPhotoSupported)
				{
					new UIAlertView("Photo Library", "Photo Library Not Available", null, "Ok", null).Show();
					return;
				}

				var file = await AppMedia.PickPhotoAsync(50, 70);
				AddFile(file);
			}
			catch { }
		}

		async void AddFile(MediaFile file)
		{
			if (file == null)
				return;

			// Moving the file because I can't open it where it normally gets placed
			var myFolder = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
			var newLocation = Path.Combine(myFolder, Path.GetFileName(file.Path));
			File.Copy(file.Path, newLocation);
			try
			{
				File.Delete(file.Path);
			}
			catch { }

            LoadingScreen.Show();
			ImageService.Instance.LoadFile(newLocation).Transform(new CircleTransformation()).Into(imgProfile);
			await new ServiceApi().SaveUser(newLocation);
            LoadingScreen.Hide();


			//ImageFilePath = newLocation;
		}
	}
}
