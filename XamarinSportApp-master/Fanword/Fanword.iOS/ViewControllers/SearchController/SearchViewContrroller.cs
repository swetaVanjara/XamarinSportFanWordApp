// This file has been autogenerated from a class added in the UI designer.

using System;
using Fanword.Shared;
using Foundation;
using Mobile.Extensions.iOS.Extensions;
using UIKit;
using Mobile.Extensions.iOS.Sources;
using System.Collections.Generic;
using Fanword.Poco.Models;
using System.Threading.Tasks;

namespace Fanword.iOS
{
	public partial class SearchViewContrroller : BaseViewController
	{
        CustomListSource<GlobalSearchItem> source;
        public FeedType Type;
        public bool UseType;
		public SearchViewContrroller (IntPtr handle) : base (handle)
		{
		}

		public override UIStatusBarStyle PreferredStatusBarStyle()
		{
			return UIStatusBarStyle.LightContent;
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            btnBack.TouchUpInside += (sender, e) => 
            {
                NavigationController.PopViewController(true);
            };

            txtSearch.EditingChanged += (sender, e) => 
            {
                GetData();
            };

            tvSearch.EstimatedRowHeight = 100;
            txtSearch.AttributedPlaceholder = new NSAttributedString("Search", new UIStringAttributes() { ForegroundColor = UIColor.FromRGB(130, 130, 130) });
            imgSearch.UserInteractionEnabled = true;
            imgSearch.AddGestureRecognizer(new UITapGestureRecognizer(() =>
            {
                txtSearch.BecomeFirstResponder();
            }));
            GetData();
        }

		void GetData()
		{
            Task<GlobalSearch> apiTask;
            if(UseType)
            {
				apiTask = new ServiceApi().SearchByType(txtSearch.Text, Type);
            }
            else
            {
				apiTask = new ServiceApi().Search(txtSearch.Text);
            }

			apiTask.HandleError();
			apiTask.OnSucess(response =>
			{
				if (txtSearch.Text == (response.Result.SearchText ?? ""))
				{
					List<GlobalSearchItem> items = response.Result.Results;
                    source = new CustomListSource<GlobalSearchItem>(items, GetCell,(arg1, arg2) => UITableView.AutomaticDimension);
					
					tvSearch.Source = source;
                    tvSearch.ReloadData();
				}
			});
		}

		int GetType(GlobalSearchItem item)
		{
			if (string.IsNullOrEmpty(item.Id))
				return 0;
			else
				return 1;
		}

		public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath, GlobalSearchItem item)
		{
            if(GetType(item) == 0)
            {
				var cell = tableView.DequeueReusableCell("SearchHeaderCell", indexPath) as SearchHeaderCell;
				cell.SetData(item);
				cell.SelectionStyle = UITableViewCellSelectionStyle.None;
				return cell;
            }
            else
            {
				var cell = tableView.DequeueReusableCell("SearchCell", indexPath) as SearchCell;
				cell.SetData(item, NavigationController);
				cell.SelectionStyle = UITableViewCellSelectionStyle.None;
				return cell;
            }

		}
	}
}
