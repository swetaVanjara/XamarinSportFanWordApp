// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Fanword.Shared;
using Plugin.Media.Abstractions;
using System.IO;
using Plugin.Media;
using AVFoundation;
using MediaPlayer;
using System.Diagnostics;
using CoreMedia;
using CoreGraphics;

namespace Fanword.iOS
{
	public partial class AddContentOptionsViewController : BaseViewController
	{
        public Action<string> ImagePicked;
        public Action<string, string> VideoPicked;
		public AddContentOptionsViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
			View.BackgroundColor = UIColor.Clear;
			vwBackground.AddGestureRecognizer(new UITapGestureRecognizer(() => DismissViewController(true, null)));

            btnTakePhoto.TouchUpInside += async (sender, e) => 
            {
                await CrossMedia.Current.Initialize();
                var mediaFile = await AppMedia.TakePhotoAsync();
                HandleFile(mediaFile);
                DismissViewController(true, null);
            };

            btnPickPhoto.TouchUpInside += async (sender, e) => 
            {
				await CrossMedia.Current.Initialize();
                var mediaFile = await AppMedia.PickPhotoAsync();
				HandleFile(mediaFile);
                DismissViewController(true, null);
            };

            btnTakeVideo.TouchUpInside += async (sender, e) => 
            {
				await CrossMedia.Current.Initialize();
                var mediaFile = await AppMedia.TakeVideoAsync();
                HandleVideo(mediaFile);
                DismissViewController(true, null);
            };  

            btnPickVideo.TouchUpInside += async (sender, e) => 
            {
				await CrossMedia.Current.Initialize();
                var mediaFile = await AppMedia.PickVideoAsync();
                HandleVideo(mediaFile);
                DismissViewController(true, null);
            };

        }

        void HandleVideo(MediaFile file)
        {

            if (file == null)
                return;
            var mediaUrl = file.Path;
            var documentsDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            var outputFile = Path.Combine(documentsDirectory, Guid.NewGuid().ToString() + ".mp4");

            AVUrlAsset asset = new AVUrlAsset(NSUrl.CreateFileUrl(new string[] { mediaUrl }));
            AVAssetExportSession exportSession = new AVAssetExportSession(asset, AVAssetExportSession.Preset1280x720);
            var fileUrl = NSUrl.CreateFileUrl(new string[] { outputFile });
            exportSession.OutputUrl = NSUrl.CreateFileUrl(new string[] { outputFile });
            exportSession.OutputFileType = AVFileType.Mpeg4;
            LoadingScreen.Show();
            LoadingScreen.SetText("Converting");
            exportSession.ExportAsynchronously(() =>
            {

                InvokeOnMainThread(() =>
                {

                    if (exportSession.Error != null)
                    {                        int i = 3;
                    }

					AVUrlAsset asset2 = new AVUrlAsset(NSUrl.CreateFileUrl(new string[] { mediaUrl }));
                    AVAssetImageGenerator generator = new AVAssetImageGenerator(asset2);
                   
			        generator.AppliesPreferredTrackTransform = true;
                    var thumbTime = new CMTime(0,30);
                    NSValue[] vals = new NSValue[] { NSValue.FromCMTime(thumbTime) };
					CGSize maxSize = new CGSize(800, 600);
					//generator.MaximumSize = maxSize;
                    generator.GenerateCGImagesAsynchronously(vals, (requestedTime, imageRef, actualTime, result, error) =>
                    {
						var previewImage = System.IO.Path.Combine(documentsDirectory, Guid.NewGuid() + ".jpg");
                        NSError err;

                        UIImage.FromImage(new CGImage(imageRef)).AsJPEG(.75f).Save(previewImage, false, out err);

                        InvokeOnMainThread(() =>
                        {
							LoadingScreen.Hide();

							VideoPicked?.Invoke(outputFile, previewImage);
                        });

                    });

                });
            });
        }

        void HandleFile(MediaFile file)
        {
            if (file == null)
                return;
            var e1 = File.Exists(file.Path);
			// Moving the file because I can't open it where it normally gets placed
			var myFolder = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
			var newLocation = Path.Combine(myFolder, Path.GetFileName(file.Path));
			File.Copy(file.Path, newLocation);
			try
			{
				File.Delete(file.Path);
			}
			catch { }

            var e2 = File.Exists(newLocation);
            ImagePicked?.Invoke(newLocation);

        }


	}
}
