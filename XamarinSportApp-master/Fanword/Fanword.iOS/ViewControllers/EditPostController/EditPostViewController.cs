// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Plugin.Settings;
using Mobile.Extensions.Extensions;
using Fanword.Poco.Models;
using FFImageLoading;
using FFImageLoading.Transformations;
using Mobile.Extensions.iOS.Extensions;
using Fanword.Shared;
using System.Collections.Generic;
using System.Linq;
using Fanword.iOS.Shared;
using Fanword.Shared.Helpers;
using System.Threading;
using System.Threading.Tasks;
using System.Net.Http;

namespace Fanword.iOS
{
	public partial class EditPostViewController : BaseViewController
	{
        public string PostId { get; set; }
        Post post;
        bool hideProfileTagging = true;
		public EditPostViewController (IntPtr handle) : base (handle)
		{
		}

		public override UIStatusBarStyle PreferredStatusBarStyle()
		{
			return UIStatusBarStyle.LightContent;
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

			ShowHelpIfNecessary(TutorialHelper.CreateContent);

            btnBack.TouchUpInside += (sender, e) => 
            {
                NavigationController.PopViewController(true);
            };
			var user = CrossSettings.Current.GetValueOrDefaultJson<User>("User");
            hideProfileTagging = string.IsNullOrEmpty(user.AthleteTeamId) || !user.AthleteVerified;

            if (!string.IsNullOrEmpty(PostId))
            {
                LoadingScreen.Show();
                var apiTask = new ServiceApi().GetPost(PostId);
                apiTask.HandleError(LoadingScreen);
                apiTask.OnSucess(response =>
                {
                    post = response.Result;
                    txtComment.Text = post.Content;

                    if(!string.IsNullOrEmpty(post.ContentSourceId))
                    {
						lblName.Text = user.ContentSourceName;
						ImageService.Instance.LoadUrl(user.ContentSourceUrl).Retry(3, 300).Transform(new CircleTransformation()).Into(imgProfile);
                        hideProfileTagging = false;
						btnNext.SetTitle("Next", UIControlState.Normal);
					}

                    if(!string.IsNullOrEmpty(post.TeamId))
                    {
						var team = user.AdminTeams.FirstOrDefault(m => m.Id == post.TeamId);
						if (team == null)
							return;
						lblName.Text = team.SchoolName;
						ImageService.Instance.LoadUrl(team.ProfileUrl).Retry(3, 300).Transform(new CircleTransformation()).Into(imgProfile);
						hideProfileTagging = true;
						btnNext.SetTitle("Next", UIControlState.Normal);
                    }
                    if(!string.IsNullOrEmpty(post.SchoolId))
                    {
						var school = user.AdminSchools.FirstOrDefault(m => m.Id == post.SchoolId);
						if (school == null)
							return;
						lblName.Text = school.Name;
						ImageService.Instance.LoadUrl(school.ProfileUrl).Retry(3, 300).Transform(new CircleTransformation()).Into(imgProfile);
						hideProfileTagging = false;
						btnNext.SetTitle("Next", UIControlState.Normal);
                    }

                    LoadingScreen.Hide();
                    SetImageUI();
                });
            }
            else
            {
                post = new Post();
                post.Schools = new List<string>();
                post.Sports = new List<string>();
                post.Teams = new List<string>();
                post.Links = new List<PostLink>(); 
                post.Images = new List<PostImage>();
			    post.Videos = new List<PostVideo>();
                post.Events = new List<string>();
                SetImageUI();
			}

            lblName.Text = user.FirstName + " " + user.LastName;
            if(!string.IsNullOrEmpty(user.ProfileUrl))
            {
				ImageService.Instance.LoadUrl(user.ProfileUrl).Retry(3, 200).Transform(new CircleTransformation()).Into(imgProfile);
            }

            btnNext.TouchUpInside += (sender, e) => 
            {
                post.Content = txtComment.Text;
                if(!post.Images.Any() && !post.Videos.Any() && !post.Links.Any() && string.IsNullOrEmpty(post.Content))
                {
					var errorController = UIAlertController.Create("Error", "You must choose some content to post", UIAlertControllerStyle.Alert);
					errorController.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, (obj) => { }));
					PresentViewController(errorController, true, null);
                    return;
				}

                if(hideProfileTagging)
                {
					var controller = Storyboard.InstantiateViewController<TagEventsViewController>();
					controller.Post = post;
					NavigationController.PushViewController(controller, true);
                }
                else
                {
					var controller = Storyboard.InstantiateViewController<TagProfileViewController>();
					controller.Post = post;
					NavigationController.PushViewController(controller, true);
				}

            };

            vwAddMedia.AddGestureRecognizer(new UITapGestureRecognizer(() =>
            {
                var controller = Storyboard.InstantiateViewController<AddContentOptionsViewController>();
				controller.ModalPresentationStyle = UIModalPresentationStyle.OverCurrentContext;
				controller.ModalTransitionStyle = UIModalTransitionStyle.CrossDissolve;
                controller.ImagePicked = ImagePicked;
                controller.VideoPicked = VideoPicked;
				PresentViewController(controller, true, null);
            }));

			vwAddLink.AddGestureRecognizer(new UITapGestureRecognizer(() =>
			{
                var controller = UIAlertController.Create("Enter a link", "", UIAlertControllerStyle.Alert);
                controller.AddTextField((tf) =>
                {
                    tf.Placeholder = "Link";
                });
                controller.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, async (obj) => 
                {
                    SetNoImage();
                    SetNoLink();
                    post.Videos.Clear();
					post.Images.Clear();
                    post.Links.Clear();

                    var link = await AppMedia.GetLinkData(controller.TextFields[0].Text);
                    if(link != null)
                    {
						link.ImageAspectRatio = await GetImageAspectRatio(link.ImageUrl);
                    }

                    if(link != null)
                    {
						post.Links.Add(link); 
                        lblLink.Text = controller.TextFields[0].Text;
                    }

                    SetImageUI();
                }));

				PresentViewController(controller, true, null);
			}));

            btnCancel.TouchUpInside += (sender, e) => 
            {
                post.Images.Clear();
                post.Videos.Clear();
                post.Links.Clear();;

                vwImageContainer.Hidden = true;
                SetNoImage();
                SetNoLink();
            };
            btnLinkCancel.Hidden = true;

            btnPostAs.TouchUpInside += (sender, e) => PostAsClicked();
            //btnNext.SetTitle("Post", UIControlState.Normal);

            txtComment.Changed += (sender, e) => 
            {
                if(string.IsNullOrEmpty(txtComment.Text))
                {
                    lblPlaceholder.Hidden = false;
                }
                else
                {
                    lblPlaceholder.Hidden = true;
                }
            };
        }

        void PostAsClicked()
        {
            var user = CrossSettings.Current.GetValueOrDefaultJson<User>("User");
			var controller = Storyboard.InstantiateViewController<PostAsViewController>();
			controller.ModalPresentationStyle = UIModalPresentationStyle.OverCurrentContext;
			controller.ModalTransitionStyle = UIModalTransitionStyle.CrossDissolve;

			controller.UserPicked = () =>
            {
                if (!string.IsNullOrEmpty(user.ProfileUrl))
				{
					ImageService.Instance.LoadUrl(user.ProfileUrl).Retry(3, 300).Transform(new CircleTransformation()).Into(imgProfile);
				}
                else
                {
                    imgProfile.Image = UIImage.FromBundle("DefaultProfile");
                }
				//btnNext.SetTitle("Post", UIControlState.Normal);
                lblName.Text = user.FirstName + " " + user.LastName;
                post.ContentSourceId = null;
				post.TeamId = null;
				post.SchoolId = null;
				post.Teams = new List<string>();
				post.Schools = new List<string>();
				post.Sports = new List<string>();
                hideProfileTagging = string.IsNullOrEmpty(user.AthleteTeamId) || !user.AthleteVerified;

            };
			controller.ContentSourcePicked = () =>
            {
				btnNext.SetTitle("Next", UIControlState.Normal);
				hideProfileTagging = false;
				post.TeamId = null;
				post.SchoolId = null;
                lblName.Text = user.ContentSourceName;
				ImageService.Instance.LoadUrl(user.ContentSourceUrl).Retry(3, 300).Transform(new CircleTransformation()).Into(imgProfile);
                post.ContentSourceId = user.ContentSourceId;
            };
            controller.AdminClicked = (admin) => 
            {
				hideProfileTagging = !string.IsNullOrEmpty(admin.TeamId);
                btnNext.SetTitle("Next", UIControlState.Normal);
				lblName.Text = admin.Title;
				post.ContentSourceId = null;
				post.TeamId = admin.TeamId;
				post.SchoolId = admin.SchoolId;
				ImageService.Instance.LoadUrl(admin.Url).Retry(3, 300).Transform(new CircleTransformation()).Into(imgProfile);
            };
			PresentViewController(controller, true, null);
        }

        void SetNoLink()
        {
			imgLink.Image = UIImage.FromBundle("IconLinkBlack");
			lblLink.TextColor = UIColor.FromRGB(21, 21, 21);
			lblLink.Text = "Add a Link";
        }

        void SetNoImage()
        {			
			imgCamera.Image = UIImage.FromBundle("IconCameraBlack");
			lblAddMedia.TextColor = UIColor.FromRGB(21, 21, 21);
        }

        void SetImageUI()
        {
            if(post.Videos.Any() || post.Images.Any() || post.Links.Any())
            {
                vwImageContainer.Hidden = false;
                if(post.Images.Any())
                {
                    var image = post.Images.FirstOrDefault();
					if (string.IsNullOrEmpty(image.Id))
					{
                        imgImage.Image = UIImage.FromFile(image.Url);
					}
                    else
                    {
                        ImageService.Instance.LoadUrl(image.Url).Into(imgImage);
                    }

                    var constraint = vwImageContainer.Constraints.FirstOrDefault(m => m.FirstItem == vwImageContainer && m.SecondItem == vwImageContainer);
					vwImageContainer.RemoveConstraint(constraint);
					vwImageContainer.AddConstraint(NSLayoutConstraint.Create(vwImageContainer, NSLayoutAttribute.Height, NSLayoutRelation.Equal, vwImageContainer, NSLayoutAttribute.Width, (nfloat)image.ImageAspectRatio, 0));

					imgCamera.Image = UIImage.FromBundle("IconCameraOrange");
                    lblAddMedia.TextColor = UIColor.FromRGB(249, 95, 6);
					vwLinkDetails.Hidden = true;
                    SetNoLink();
                }
                else if(post.Videos.Any())
                {
                    var video = post.Videos.FirstOrDefault();
					if (string.IsNullOrEmpty(video.Id))
					{
						imgImage.Image = UIImage.FromFile(video.ImageUrl);
					}
					else
					{
						ImageService.Instance.LoadUrl(video.ImageUrl).Into(imgImage);
					}

					var constraint = vwImageContainer.Constraints.FirstOrDefault(m => m.FirstItem == vwImageContainer && m.SecondItem == vwImageContainer);
					vwImageContainer.RemoveConstraint(constraint);
					vwImageContainer.AddConstraint(NSLayoutConstraint.Create(vwImageContainer, NSLayoutAttribute.Height, NSLayoutRelation.Equal, vwImageContainer, NSLayoutAttribute.Width, (nfloat)video.ImageAspectRatio, 0));

					imgCamera.Image = UIImage.FromBundle("IconCameraOrange");
					lblAddMedia.TextColor = UIColor.FromRGB(249, 95, 6);
					vwLinkDetails.Hidden = true;
                    SetNoLink();
                }
				else if (post.Links.Any())
				{
                    var link = post.Links.FirstOrDefault();
                    if(string.IsNullOrEmpty(link.ImageUrl))
                    {
                        imgImage.Image = UIImage.FromBundle("IconNoImage");
                    }
                    else
                    {
                        ImageService.Instance.LoadUrl(link.ImageUrl).Into(imgImage);
                    }

					var constraint = vwImageContainer.Constraints.FirstOrDefault(m => m.FirstItem == vwImageContainer && m.SecondItem == vwImageContainer);
					vwImageContainer.RemoveConstraint(constraint);
					vwImageContainer.AddConstraint(NSLayoutConstraint.Create(vwImageContainer, NSLayoutAttribute.Height, NSLayoutRelation.Equal, vwImageContainer, NSLayoutAttribute.Width, (nfloat)link.ImageAspectRatio, 0));

					lblLink.TextColor = UIColor.FromRGB(249, 95, 6);
                    imgLink.Image = UIImage.FromBundle("IconLinkOrange");
                    var uri = new Uri(link.LinkUrl);
                    lblLinkHost.Text = uri.Host;
                    vwLinkDetails.Hidden = false;
                    lblTitle.Text = link.Title;
				}
            }
            else
            {
                vwImageContainer.Hidden = true;
            }
            btnLinkCancel.Hidden = true;
        
        }

        async void ImagePicked(string path)
        {
            post.Images.Clear();
            post.Images.Add(new PostImage() { Url = path, ImageAspectRatio = await GetImageAspectRatio(path) });
            post.Videos.Clear();
            post.Links.Clear();
            SetImageUI();
        }

        async void VideoPicked(string path, string imageFile)
        {
			post.Videos.Clear();
            post.Videos.Add(new PostVideo() { Url = path, ImageUrl = imageFile, ImageAspectRatio = await GetImageAspectRatio(imageFile) });
			post.Images.Clear();
            post.Links.Clear();
            SetImageUI();
        }

		async Task<float> GetImageAspectRatio(string file)
		{
			float ratio = 0.5625f;
			try
			{
                UIImage image = null;
				if (file.StartsWith("http"))
				{
					HttpClient client = new HttpClient();
					var bytes = await client.GetByteArrayAsync(file);
                    image = UIImage.LoadFromData(NSData.FromArray(bytes));
				}
				else
				{
                    image = UIImage.FromFile(file);
				}

                var width = image.Size.Width;
                var height = image.Size.Height;
				ratio = (float)height / (float)width;
				ratio = ratio <= 0 ? .5625f : ratio;
			}
			catch (Exception e)
			{
			}

			return ratio;
		}
	}
}
