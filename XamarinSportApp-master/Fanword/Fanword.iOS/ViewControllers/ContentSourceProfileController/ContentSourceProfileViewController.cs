// This file has been autogenerated from a class added in the UI designer.

using System;
using Fanword.Poco.Models;
using Foundation;
using UIKit;
using Mobile.Extensions.iOS.Extensions;
using Fanword.Shared;
using Fanword.Shared.Helpers;
using FFImageLoading;
using FFImageLoading.Transformations;
using Fanword.iOS.Shared;

namespace Fanword.iOS
{
	public partial class ContentSourceProfileViewController : BaseViewController
	{
        public string ContentSourceId;
        FeedViewController feedController;
        ContentSourceAboutViewController aboutController;
        ContentSourceProfile profile;
		public ContentSourceProfileViewController (IntPtr handle) : base (handle)
		{
		}

		public override UIStatusBarStyle PreferredStatusBarStyle()
		{
			return UIStatusBarStyle.LightContent;
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
			ShowHelpIfNecessary(TutorialHelper.Profiles, () =>
            {
				ShowHelpIfNecessary(TutorialHelper.ContentSource);
            });

			btnBack.TouchUpInside += (sender, e) => NavigationController.PopViewController(true);
			feedController = Storyboard.InstantiateViewController<FeedViewController>();
			feedController.HeaderView = vwHeader;
			feedController.Id = ContentSourceId;
			feedController.Type = FeedType.ContentSource;
            feedController.RefreshStarted += (sender, e) => GetData();
			AddChildViewController(feedController);
            svScroller.Add(feedController.View);
			var f = feedController.View.Frame;
			f.X = 0;
			f.Y = 0;
			f.Width = UIScreen.MainScreen.Bounds.Width;
			f.Height = UIScreen.MainScreen.Bounds.Height-120;
			feedController.View.Frame = f;
			feedController.HideAddPost();

            aboutController = Storyboard.InstantiateViewController<ContentSourceAboutViewController>();
            svScroller.Add(aboutController.View);
            var frame = aboutController.View.Frame;
            frame.X = UIScreen.MainScreen.Bounds.Width;
            frame.Height = UIScreen.MainScreen.Bounds.Height - 120;
            frame.Width = UIScreen.MainScreen.Bounds.Width;
            aboutController.View.Frame = frame;
            svScroller.ContentSize = new CoreGraphics.CGSize() { Width = UIScreen.MainScreen.Bounds.Width * 2 };

            svScroller.Scrolled += (sender, e) => 
            {
                lcIndicatorLeading.Constant = svScroller.ContentOffset.X / 2f;
            };

            GetData();

            btnProfile.TouchUpInside += (sender, e) => 
            {
                svScroller.SetContentOffset(new CoreGraphics.CGPoint(), true);
            };
			btnAbout.TouchUpInside += (sender, e) =>
			{
                svScroller.SetContentOffset(new CoreGraphics.CGPoint() { X = UIScreen.MainScreen.Bounds.Width }, true);
			};

			btnFollow.TouchUpInside += (sender, e) =>
			{
                if (profile == null)
                    return;
			    Shared.Follower.ToggleFollow(btnFollow, profile, profile.ContentSourceId, FeedType.ContentSource, (following) =>
                {
                    GetData();
                });
			};

			lblFollowers.Superview.AddGestureRecognizer(new UITapGestureRecognizer(() =>
			{
				if (profile == null)
					return;
				var controller = Storyboard.InstantiateViewController<FollowersViewController>();
				controller.Id = profile.ContentSourceId;
				controller.Type = FeedType.ContentSource;
				NavigationController.PushViewController(controller, true);
			}));

            btnSignUp.TouchUpInside += (sender, e) => 
            {
                if (profile != null)
                {
                    Links.OpenUrl(profile.ActionButtonLink);
                }
            };
            lblUrl.UserInteractionEnabled = true;
            lblUrl.AddGestureRecognizer(new UITapGestureRecognizer((obj) => 
            {
                Links.OpenUrl(profile?.WebsiteLink);
            }));
        }


		public override void ViewDidLayoutSubviews()
		{
			base.ViewDidLayoutSubviews();
			FixFrame(feedController.View);
			FixFrame(aboutController.View);
		}

		void FixFrame(UIView view)
		{
			var f = view.Frame;
			f.Width = UIScreen.MainScreen.Bounds.Width;
            f.Height = UIScreen.MainScreen.Bounds.Height - 120;
			view.Frame = f;
		}

		void GetData()
		{
			var apiTask = new ServiceApi().GetContentSourceProfile(ContentSourceId);
			apiTask.HandleError();
			apiTask.OnSucess(response =>
			{

                profile = response.Result;
                btnSignUp.SetTitle(profile.ActionButtonText, UIControlState.Normal);

                var color = ColorHelper.GetColor(profile.PrimaryColor, btnBack.Superview.BackgroundColor);
                btnSignUp.SetTitleColor(color, UIControlState.Normal);
                btnBack.Superview.BackgroundColor = color;
                btnProfile.Superview.Superview.BackgroundColor = color;
                    
                aboutController.SetView(profile);
				lblName.Text = response.Result.Name;
                lblTitle.Text = response.Result.Name;
				lblPosts.Text = LargeValueHelper.GetString(response.Result.Posts);
				lblFollowers.Text = LargeValueHelper.GetString(response.Result.Followers);
				try
				{
					if (!response.Result.WebsiteLink.StartsWith("http://") && !response.Result.WebsiteLink.StartsWith("https://"))
					{
						response.Result.WebsiteLink = "http://" + response.Result.WebsiteLink;
					}
					lblUrl.Text = new Uri(response.Result.WebsiteLink).Host;
				}
				catch (Exception e)
				{
				}
				lblDescription.Text = response.Result.Description;
                Views.SetFollowed(btnFollow, response.Result.IsFollowing);

				if (!string.IsNullOrEmpty(response.Result.ProfileUrl))
				{
					ImageService.Instance.LoadUrl(response.Result.ProfileUrl).Transform(new CircleTransformation()).Retry(3, 300).Into(imgProfile);
				}


			});
		}
	}
}
