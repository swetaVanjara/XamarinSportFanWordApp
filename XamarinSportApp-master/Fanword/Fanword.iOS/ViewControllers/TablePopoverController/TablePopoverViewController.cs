// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Foundation;
using UIKit;
using Mobile.Extensions.iOS.Sources;
using System.Collections.Generic;

namespace Fanword.iOS
{
	public partial class TablePopoverViewController : UIViewController
	{
		public UIViewController parent;
		public UIView anchorView;
		public List<object> values;
		public Func<UITableView, NSIndexPath, object, UITableViewCell> getCell;
		public UITableView TableView { get { return tvList; } set { tvList = value; } }
		bool IsHiding;
		public delegate void ItemClickEvent (object sender, object e);
		public event ItemClickEvent ItemClick;
		public bool PreventFullscreen;
		public bool MatchAchorViewWidth;
		public bool ClickShouldHide = true;
		public TablePopoverViewController (IntPtr handle) : base (handle)
		{
		}
		/*public TablePopoverViewController (UIViewController parent, UIView anchorView, List<object> values, Func<UITableView, NSIndexPath, object, UITableViewCell> getCell) : base ("TablePopoverViewController", null)
		{
			this.parent = parent;
			this.anchorView = anchorView;
			this.values = values;
			this.getCell = getCell;

			//parent.AddChildViewController(this);
		}*/

		public override void DidReceiveMemoryWarning ()
		{
			// Releases the view if it doesn't have a superview.
			base.DidReceiveMemoryWarning ();

			// Release any cached data, images, etc that aren't in use.
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			var source = new CustomListSource<object> (values, getCell, (tv, ip) => 50);
			source.ItemClick += (sender, e) =>
			{
				if (ItemClick != null)
				{
					ItemClick (this, e);
				}
				if (ClickShouldHide)
				{
					Hide ();
				}
			};
			tvList.Source = source;
			var tap = new UITapGestureRecognizer ((gesture) =>
			{
				Hide ();
			})
			{ CancelsTouchesInView = false };

			tap.ShouldReceiveTouch += (UIGestureRecognizer recognizer, UITouch touch) =>
			{
				if (touch.View != View && touch.View != tvList && touch.View.Superview.GetType ().BaseType != typeof (UITableViewCell))
				{
					return true;
				}

				return false;
			};

			View.Layer.ShadowColor = UIColor.Black.CGColor;
			View.Layer.ShadowOpacity = .75f;
			View.Layer.ShadowRadius = 4;
			View.Layer.ShadowOffset = new CGSize (0, 5);
			View.BackgroundColor = UIColor.Clear;
			tvList.BackgroundColor = UIColor.White;
			tvList.SeparatorStyle = UITableViewCellSeparatorStyle.None;
			(UIApplication.SharedApplication.Delegate as AppDelegate).Window.AddGestureRecognizer (tap);
			// Perform any additional setup after loading the view, typically from a nib.
		}

		public override void ViewDidLayoutSubviews ()
		{
			base.ViewDidLayoutSubviews ();

			var f = View.Frame;
			var frameInWindow = anchorView.ConvertRectToView (anchorView.Frame, UIApplication.SharedApplication.Delegate.GetWindow ());
			nfloat y = anchorView.Frame.Y;
			UIView parent = anchorView;
			while (parent.Superview != null)
			{
				parent = parent.Superview;
				y += parent.Frame.Y;
			}
			nfloat desiredY = y + frameInWindow.Height;
			nfloat height = values.Count * 55;

			// Dropping this below the view would cause it to go offscreen
			if (desiredY + height > UIScreen.MainScreen.Bounds.Height)
			{
				// Try seeing if it will fit above
				var newDesiredY = y - height;
				if (newDesiredY < 0 || newDesiredY + height > UIScreen.MainScreen.Bounds.Height)
				{
					// If we don't want fullsreen just try sticking it below
					if (PreventFullscreen)
					{
						height = (UIScreen.MainScreen.Bounds.Height - desiredY) - 80; // Go to the bottom of the screen
					}
					else
					{
						// Looks like it won't fit aboce either, fill the screen with the content
						height = (nfloat)Math.Min (UIScreen.MainScreen.Bounds.Height - 40, height); // Cap the height to the size of the screeen
						desiredY = (UIScreen.MainScreen.Bounds.Height - height) / 2;
					}
				}
				else
				{
					// It fits!
					desiredY = newDesiredY;
				}
			}

			f.Y = desiredY;
			f.Height = height;

			if (MatchAchorViewWidth)
			{
				f.Width = anchorView.Frame.Width;
				f.X = anchorView.Frame.X;
			}
			else
			{
				f.Width = UIScreen.MainScreen.Bounds.Width - 20;
				f.X = 10;
			}
			View.Frame = f;
		}

		public void Show ()
		{
			if (View.Superview == null)
			{
				(tvList.Source as CustomListSource<object>).Items = values;
				(UIApplication.SharedApplication.Delegate as AppDelegate).Window.AddSubview (View);
				View.Superview.BringSubviewToFront (View);


				View.Alpha = 0.001f;
				View.Transform = CGAffineTransform.MakeScale (0.88f, 0.88f);
				UIView.Animate (.2, () =>
				{
					View.Transform = CGAffineTransform.MakeScale (1.03f, 1.03f);
				});
				UIView.Animate (.2, .2, UIViewAnimationOptions.CurveEaseInOut | UIViewAnimationOptions.AllowUserInteraction, () =>
				{
					View.Transform = CGAffineTransform.MakeScale (.99f, .99f);
				}, () =>
				{ });
				UIView.Animate (.2, .4, UIViewAnimationOptions.CurveEaseInOut | UIViewAnimationOptions.AllowUserInteraction, () =>
				{
					View.Transform = CGAffineTransform.MakeScale (1f, 1f);
				}, () =>
				{ });
				UIView.Animate (0.5, 0, UIViewAnimationOptions.AllowUserInteraction, () =>
				{
					View.Alpha = 1;
				}, () =>
				{ });
			}

		}

		public void Hide ()
		{
			if (!IsHiding && View.Superview != null)
			{
				IsHiding = true;
				UIView.Animate (0.3, 0, UIViewAnimationOptions.CurveEaseInOut, () =>
				{
					View.Alpha = 0;
				}, () =>
				{
					View.RemoveFromSuperview ();
					IsHiding = false;
				});
			}
		}
	}
}
